#!/bin/bash
# This script captures the perf events on specified worker core for user specified sleep interval. 
if [ "$#" -lt 3 ]; then
    echo "Usage: $0 <output_directory> <cores> <sleep>"
    echo "Example: $0 /home/ubuntu/test_collect \"37,33\" 10"
    exit 1
fi
output_directory="$1"
worker_core="$2"
sleep_sec="$3"
if [ ! -d "$output_directory" ]; then
    mkdir -p "$output_directory"
fi
#N1-PMU Events
SW_INCR="r00"
L1I_CACHE_REFILL="r01"
L1I_TLB_REFILL="r02"
L1D_CACHE_REFILL="r03"
L1D_CACHE="r04"
L1D_TLB_REFILL="r05"
INST_RETIRED="r08"
EXC_TAKEN="r09"
EXC_RETURN="r0A"
CID_WRITE_RETIRED="r0B"
BR_MIS_PRED="r10"
CPU_CYCLES="r11"
BR_PRED="r12"
MEM_ACCESS="r13"
L1I_CACHE="r14"
L1D_CACHE_WB="r15"
L2D_CACHE="r16"
L2D_CACHE_REFILL="r17"
L2D_CACHE_WB="r18"
BUS_ACCESS="r19"
MEMORY_ERROR="r1A"
INST_SPEC="r1B"
BUS_CYCLES="r1D"
CHAIN="r1E"
L2D_CACHE_ALLOCATE="r20"
BR_RETIRED="r21"
BR_MIS_PRED_RETIRED="r22"
STALL_FRONTEND="r23"
STALL_BACKEND="r24"
L1D_TLB="r25"
L1I_TLB="r26"
L3D_CACHE_ALLOCATE="r29"
L3D_CACHE_REFILL="r2A"
L3D_CACHE="r2B"
L2D_TLB_REFILL="r2D"
L2D_TLB="r2F"
REMOTE_ACCESS="r31"
DTLB_WALK="r34"
ITLB_WALK="r35"
LL_CACHE_RD="r36"
LL_CACHE_MISS_RD="r37"
L1D_CACHE_RD="r40"
L1D_CACHE_WR="r41"
L1D_CACHE_REFILL_RD="r42"
L1D_CACHE_REFILL_WR="r43"
L1D_CACHE_REFILL_INNER="r44"
L1D_CACHE_REFILL_OUTER="r45"
L1D_CACHE_WB_VICTIM="r46"
L1D_CACHE_WB_CLEAN="r47"
L1D_CACHE_INVAL="r48"
L1D_TLB_REFILL_RD="r4C"
L1D_TLB_REFILL_WR="r4D"
L1D_TLB_RD="r4E"
L1D_TLB_WR="r4F"
L2D_CACHE_RD="r50"
L2D_CACHE_WR="r51"
L2D_CACHE_REFILL_RD="r52"
L2D_CACHE_REFILL_WR="r53"
L2D_CACHE_WB_VICTIM="r56"
L2D_CACHE_WB_CLEAN="r57"
L2D_CACHE_INVAL="r58"
L2D_TLB_REFILL_RD="r5C"
L2D_TLB_REFILL_WR="r5D"
L2D_TLB_RD="r5E"
L2D_TLB_WR="r5F"
BUS_ACCESS_RD="r60"
BUS_ACCESS_WR="r61"
MEM_ACCESS_RD="r66"
MEM_ACCESS_WR="r67"
UNALIGNED_LD_SPEC="r68"
UNALIGNED_ST_SPEC="r69"
UNALIGNED_LDST_SPEC="r6A"
LDREX_SPEC="r6C"
STREX_PASS_SPEC="r6D"
STREX_FAIL_SPEC="r6E"
STREX_SPEC="r6F"
LD_SPEC="r70"
ST_SPEC="r71"
LDST_SPEC="r72"
DP_SPEC="r73"
ASE_SPEC="r74"
VFP_SPEC="r75"
PC_WRITE_SPEC="r76"
CRYPTO_SPEC="r77"
BR_IMMED_SPEC="r78"
BR_RETURN_SPEC="r79"
BR_INDIRECT_SPEC="r7A"
ISB_SPEC="r7C"
DSB_SPEC="r7D"
DMB_SPEC="r7E"
EXC_UNDEF="r81"
EXC_SVC="r82"
EXC_PABORT="r83"
EXC_DABORT="r84"
EXC_IRQ="r86"
EXC_FIQ="r87"
EXC_SMC="r88"
EXC_HVC="r8A"
EXC_TRAP_PABORT="r8B"
EXC_TRAP_DABORT="r8C"
EXC_TRAP_OTHER="r8D"
EXC_TRAP_IRQ="r8E"
EXC_TRAP_FIQ="r8F"
RC_LD_SPEC="r90"
RC_ST_SPEC="r91"
L3_CACHE_RD="rA0"


# Keys representing file names and values representing the event batches.
declare -A perf_events=(
    ["Architecturally executed IPC"]=f"{INST_RETIRED},{CPU_CYCLES}"
    ["Speculatively executed IPC"]=f"{INST_SPEC},{CPU_CYCLES}"
    ["Front end stall rate"]=f"{STALL_FRONTEND},{CPU_CYCLES}"
    ["Back end stall rate"]=f"{STALL_BACKEND},{CPU_CYCLES}"
    ["Exception rate over time"]=f"{EXC_TAKEN},{CPU_CYCLES}"
    ["Exception rate per instructions"]=f"{EXC_TAKEN},{INST_RETIRED}"
    ["Branch misprediction rate"]=f"{BR_MIS_PRED_RETIRED},{BR_RETIRED}"
    ["Branch MPKI"]=f"{BR_MIS_PRED_RETIRED},{INST_RETIRED}"
    ["Successful exclusive store access rate"]=f"{STREX_PASS_SPEC},{STREX_SPEC}"
    ["Failed exclusive store accesses rate"]=f"{STREX_FAIL_SPEC},{STREX_SPEC}"
    ["DSB rate per instructions"]=f"{DSB_SPEC},{INST_SPEC}"
    ["DSB rate over time"]=f"{DSB_SPEC},{CPU_CYCLES}"
    ["DMB rate per instructions"]=f"{DMB_SPEC},{INST_SPEC}"
    ["DMB rate over time"]=f"{DMB_SPEC},{CPU_CYCLES}"
    ["ISB rate per instructions"]=f"{ISB_SPEC},{INST_SPEC}"
    ["ISB rate over time"]=f"{ISB_SPEC},{CPU_CYCLES}"
    ["SIMD instruction rate per instructions"]=f"{ASE_SPEC},{INST_SPEC}"
    ["SIMD instruction rate over time"]=f"{ASE_SPEC},{CPU_CYCLES}"
    ["L1 data TLB miss rate"]=f"{L1D_TLB_REFILL},{L1D_TLB}"
    ["L1 data TLB read miss rate"]=f"{L1D_TLB_REFILL_RD},{L1D_TLB_RD}"
    ["L1 data TLB write miss rate"]=f"{L1D_TLB_REFILL_WR},{L1D_TLB_WR}"
    ["L1 data TLB misses per context swap"]=f"{L1D_TLB_REFILL},{TTBR_WRITE_RETIRED}"
    ["L1 instruction TLB miss rate"]=f"{L1I_TLB_REFILL},{L1I_TLB}"
    ["L1 instruction TLB misses per context swap"]=f"{L1I_TLB_REFILL},{TTBR_WRITE_RETIRED}"
    ["L2 TLB miss rate"]=f"{L2D_TLB_REFILL},{L2D_TLB}"
    ["L2 TLB read miss rate"]=f"{L2D_TLB_REFILL_RD},{L2D_TLB_RD}"
    ["L2 TLB write miss rate"]=f"{L2D_TLB_REFILL_WR},{L2D_TLB_WR}"
    ["L2 TLB misses per context swap"]=f"{L2D_TLB_REFILL},{TTBR_WRITE_RETIRED}"
    ["D-side page table walk rate"]=f"{DTLB_WALK},{L1D_TLB}"
    ["D-side page table MPKI"]=f"{DTLB_WALK},{INST_RETIRED}"
    ["I-side page table walk rate"]=f"{ITLB_WALK},{L1I_TLB}"
    ["I-side page table MPKI"]=f"{ITLB_WALK},{INST_RETIRED}"
    ["L1 I-cache miss rate"]=f"{L1I_CACHE_REFILL},{L1I_CACHE}"
    ["L1 I-cache MPKI"]=f"{L1I_CACHE_REFILL},{INST_RETIRED}"
    ["L1 I-cache miss per instructions"]=f"{L1I_CACHE_REFILL},{INST_SPEC}"
    ["L1 D-cache miss rate"]=f"{L1D_CACHE_REFILL},{L1D_CACHE}"
    ["L1 D-cache MPKI"]=f"{L1D_CACHE_REFILL},{INST_RETIRED}"
    ["L1 D-cache rate of cache misses in L1 and L2"]=f"{L1D_CACHE_REFILL_OUTER},{L1D_CACHE_REFILL}"
    ["L1 D-cache read miss rate"]=f"{L1D_CACHE_REFILL_RD},{L1D_CACHE_RD}"
    ["L1 D-cache write miss rate"]=f"{L1D_CACHE_REFILL_WR},{L1D_CACHE_WR}"
    ["L1 D-cache read rate"]=f"{L1D_CACHE_RD},{L1D_CACHE}"
    ["L1 D-cache write rate"]=f"{L1D_CACHE_WR},{L1D_CACHE}"
    ["L1 D-cache eviction rate"]=f"{L1D_CACHE_WB_VICTIM},{L1D_CACHE}"
    ["L2 cache miss rate"]=f"{L2D_CACHE_REFILL},{L2D_CACHE}"
    ["L2 cache MPKI"]=f"{L2D_CACHE_REFILL},{INST_RETIRED}"
    ["L2 cache read rate"]=f"{L2D_CACHE_RD},{L2D_CACHE}"
    ["L2 cache write rate"]=f"{L2D_CACHE_WR},{L2D_CACHE}"
    ["L2 cache eviction rate"]=f"{L2D_CACHE_WB_VICTIM},{L2D_CACHE}"
    ["LLC cache miss rate"]=f"{LL_CACHE_MISS_RD},{LL_CACHE_RD}"
    ["LLC cache MPKI"]=f"{LL_CACHE_MISS_RD},{INST_RETIRED}"
    ["MEM access read rate"]=f"{MEM_ACCESS_RD},{MEM_ACCESS}"
    ["MEM access write rate"]=f"{MEM_ACCESS_WR},{MEM_ACCESS}"
    ["LD instruction rate per instructions"]=f"{LD_SPEC},{INST_SPEC}"
    ["LD instruction rate over time"]=f"{LD_SPEC},{CPU_CYCLES}"
    ["ST instruction rate per instructions"]=f"{ST_SPEC},{INST_SPEC}"
    ["ST instruction rate over time"]=f"{ST_SPEC},{CPU_CYCLES}"
    ["DP instruction rate per instructions"]=f"{DP_SPEC},{INST_SPEC}"
    ["DP instruction rate over time"]=f"{DP_SPEC},{CPU_CYCLES}"
    ["VFP instruction rate per instructions"]=f"{VFP_SPEC},{INST_SPEC}"
    ["VFP instruction rate over time"]=f"{VFP_SPEC},{CPU_CYCLES}"
    ["PC_WRITE instruction rate per instructions"]=f"{PC_WRITE_SPEC},{INST_SPEC}"
    ["PC_WRITE instruction rate over time"]=f"{PC_WRITE_SPEC},{CPU_CYCLES}"
    ["CRYPTO instruction rate per instructions"]=f"{CRYPTO_SPEC},{INST_SPEC}"
    ["CRYPTO instruction rate over time"]=f"{CRYPTO_SPEC},{CPU_CYCLES}"
    ["BR_IMMED instruction rate per instructions"]=f"{BR_IMMED_SPEC},{INST_SPEC}"
    ["BR_IMMED instruction rate over time"]=f"{BR_IMMED_SPEC},{CPU_CYCLES}"
    ["BR_RETURN instruction rate per instructions"]=f"{BR_RETURN_SPEC},{INST_SPEC}"
    ["BR_RETURN instruction rate over time"]=f"{BR_RETURN_SPEC},{CPU_CYCLES}"
    ["BR_INDIRECT instruction rate per instructions"]=f"{BR_INDIRECT_SPEC},{INST_SPEC}"
    ["BR_INDIRECT instruction rate over time"]=f"{BR_INDIRECT_SPEC},{CPU_CYCLES}"
)
# Fn to run perf command 
run_perf() {
        local e="$1"
 #       local worker_core="$2"
        #local op_file="${log_file}-${e}.txt"                
        #local op_file="${e}.txt"
	#local op_file="${e// /_}.txt"
	#local op_file="${output_directory}/${e// /_}.txt"
	local op_file="${output_directory}/${e// /_}"
	local op_file="${op_file//\'/}"  # Remove apostrophes
	local batch="${perf_events[$e]}" #extracts values corresponding to  perf_events keys
        
	perf stat -A --output "$op_file" -e "$batch" -C "$worker_core" -x "," sleep "$sleep_sec"

}
# Iterate through worker cores and run perf serially
for e in "${!perf_events[@]}"; do
        run_perf "$e" 
done
#Calling run_perf fn and iterating over perf_events
#for e in "${!perf_events[@]}"; do
#        run_perf "$e"
#done

